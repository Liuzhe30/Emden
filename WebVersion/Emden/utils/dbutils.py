# -*- coding: utf-8 -*-
# @Time    : 2020/8/1 21:06
# @Author  : Sijia
# @Email   : guosijia007@yeah.net
# @File    : dbutils.py
# @Software: PyCharm

import json
import logging
import os


from pymongo import MongoClient

logger = logging.getLogger(__name__)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)

# user:'emden_user', pwd:"sjtu_bmi"
class DBConnection(object):

    def __init__(self, db="emden", col="records", host=None, port=None,
                 user=None, password=None, database=None):
        assert db is not None
        self.db = db
        if port is not None and not isinstance(port, int):
            port = int(port)
        try:
            # TODO: option to specify config file
            cfgfile = "/data/emden/Emden/utils/dbservers.json"
            if not os.path.exists(cfgfile):
                if os.path.exists("/data/emden/Emden/utils/dbservers.json"):
                    cfgfile = "/data/emden/Emden/utils/dbservers.json"
                elif os.path.exists("/data/emden/Emden/utils/dbservers.json"):
                    cfgfile = "/data/emden/Emden/utils/dbservers.json"
                else:
                    cfgfile = "/data/emden/Emden/utils/dbservers.json"
            logger.info("Servers configuration file: %s" % cfgfile)
            with open(cfgfile, "r") as cfgf:
                conf = json.load(cfgf)
        except IOError:
            print('Not find dbservers.json!!!')
            conf = {"es_host": "localhost", "es_port": 9200,
                    "mongodb_host": "localhost", "mongodb_port": 32705}

        if host is None:
            host = conf['mongodb_host']
        if port is None and 'mongodb_port' in conf:
            port = conf['mongodb_port']

        mc = MongoClient(host, port)
        if user is None:
            user = conf['mongodb_user']
        if password is None:
            password = conf['mongodb_password']
        if user not in ["", None] and password not in ["", None]:
            if database is None:
                db_auth = mc[conf['mongodb_db']]
            else:
                db_auth = mc[database]
            db_auth.authenticate(user, password)

        logger.info("New MongoDB connection: '%s:%d'" % (host, port))
        self.mdbi = mc[db]

        if col is not None:
            self.mdbcollection = col
            self.col = self.mdbi[col]


def test():
    test_data = {'job_id': '60653d24-6289-4aff-8881-40a74669f0e8', 'result': [{
                                                 'affected_protein': 'MEKSIAKGLSDKLYEKRKAAALELEKLVKQCVLEGDYDRIDKIIDELCRDYAYALHQPMARNAGLMGLAATAIALGINDVGRYLRNILPPVLACFGDQNDQVRFYACESLYNIAKIAKGEILVYFNEIFDVLCKISADTENSVRGAAELLDRLIKDIVAERASNYISIVNNGSHGLLPAIKTDPISGDVYQEEYEQDNQLAFSLPKFIPLLTERIYAINPDTRVFLVDWLKVLLNTPGLELISYLPSFLGGLFTFLGDSHKDVRTVTHTLMDSLLHEVDRISKLQTEIKMKRLERLKMLEDKYNNSSTPTKKADGALIAEKKKTLMTALGGLSKPLSMETDDTKLSNTNETDDERHLTSQEQLLDSEATSQEPLRDGEEYIPGQDINLNFPEVITVLVNNLASSEAEIQLIALHWIQVILSISPNVFIPFLSKILSVLLKLLSDSDPHITEIAQLVNGQLLSLCSSYVGKETDGKIAYGPIVNSLTLQFFDSRIDAKIACLDWLILIYHKAPNQILKHNDSMFLTLLKSLSNRDSVLIEKALSLLQSLCSDSNDNYLRQFLQDLLTLFKRDTKLVKTRANFIMRQISSRLSPERVYKVISSILDNYNDTTFVKMMIQILSTNLITSPEMSSLRNKLRTCEDGMFFNSLFKSWCPNPVSVISLCFVAENYELAYTVLQTYANYELKLNDLVQLDILIQLFESPVFTRMRLQLLEQQKHPFLHKCLFGILMIIPQSKAFETLNRRLNSLNIWTSQSYVMNNYIRQRENSNFCDSNSDISQRSVSQSKLHFQELINHFKAVSEEDEYSSDMIRLDHGANNKSLLLGSFLDGIDEDKQEIVTPISPMNEAINEEMESPNDNSSVILKDSGSLPFNRNVSDKLKK',
                                                 'partner_protein': 'MTEEDRKLTVETETVEAPVANNLLLSNNSNVVAPNPSIPSASTSTSPLHREIVDDSVATANTTSNVVQHNLPTIDNNLMDSDATSHNQDHWHSDINRAGTSMSTSDIPTDLHLEHIGSVSSTNNNSNNALINHNPLSSHLSNPSSSLRNKKSSLLVASNPAFASDVELSKKKPAVISNNMPTSNIALYQTARSANIHGPSSTSASKAFRKASAFSNNTAPSTSNNIGSNTPPAPLLPLPSLSQQNKPKIIERPTMHVTNSREILLGENLLDDTKAKNAPANSTTHDNGPVANDGLRIPNHSNADDNENNNKMKKNKNINSGKNERNDDTSKICTTSTKTAPSTAPLGSTDNTQALTASVSSSNADNHNNNKKKTSSNNNGNNSNSASNKTNADIKNSNADLSASTSNNNAINDDSHESNSEKPTKADFFAARLATAVGENEISDSEETFVYESAANSTKNLIFPDSSSQQQQQQQQPPKQQQQQQNHGITSKISAPLLNNNKKLLSRLKNSRHISTGAILNNTIATISTNPNLNSNVMQNNNNLMSGHNHLDELSSIKQEPPHQLQQQQPPMDVQSVDSYTSDNPDSNVIAKSPDKRSSLVSLSKVSPHLLSSTSSNGNTISCPNVATNSQELEPNNDISTKKSLSNSTLRHSSANRNSNYGDNKRPLRTTVSKIFDSNPNGAPLRRYSGVPDHVNLEDYIEQPHNYPTMQNSVKKDEFYNSRNNKFPHGLNFYGDNNVIEEENNGDSSNVNRPQHTNLQHEFIPEDNESDENDIHSMFYYNHKNDLETKPLISDYGEDEDVDDYDRPNATFNSYYGSASNTHELPLHGRMPSRSNNDYYDFMVGNNTGNNNQLNEYTPLRMKRGQRHLSRTNNSIMNGSIHMNGNDDVTHSNINNNDIVGYSPHNFYSRKSPFVKVKNFLYLAFVISSLLMTGFILGFLLATNKELQDVDVVVMDNVISSSDELIFDITVSAFNPGFFSISVSQVDLDIFAKSSYLKCDSNGDCTVMEQERKILQITTNLSLVEESANNDISGGNIETVLLGTAKKLETPLKFQGGAFNRNYDVSVSSVKLLSPGSREAKHENDDDDDDDGDDGDDENNTNERQYKSKPNARDDKEDDTKKWKLLIKHDYELIVRGSMKYEVPFFNTQKSTAIQKDSMVHPGKK',
                                                 'variant': 'L329T', 'pred_class': 'disrupting',
                                                 'pred_score': 0.3783115744590759, 'error_msg': '', 'state': 'success'},
                                             {
                                                 'affected_protein': 'MDLCHPEPAELSSGETEELQRIKWHRKQLLEDIQKLKDEIADVFAQIDCFESAEESRMAQKEKELCIGRKKFNMDPAKGIQYFIEHKLLTPDVQDIARFLYKGEGLNKTAIGTYLGERDPINLQVLQAFVDCHEFANLNLVQALRQFLWSFRLPGEAQKIDRMMEAFATRYCLCNPGVFQSTDTCYVLSFSIIMLNTSLHNPNVRDRPPFERFVSMNRGINNGSDLPEDQLRNLFDSIKSEPFSIPEDDGNDLTHTFFNPDREGWLLKLGGRVKTWKRRWFILTDNCLYYFEFTTDKEPRGIIPLENLSVQKVDDPKKPFCLELYNPSCRGQKIKACKTDGDGRVVEGKHESYRISATSAEERDQWIESIRASITRVPFYDLVSTRKKKIASKQ',
                                                 'partner_protein': 'MMFSGFNADYEASSSRCSSASPAGDSLSYYHSPADSFSSMGSPVNAQDFCTDLAVSSANFIPTVTAISTSPDLQWLVQPALVSSVAPSQTRAPHPFGVPAPSAGAYSRAGVVKTMTGGRAQSIGRRGKVEQLSPEEEEKRRIRRERNKMAAAKCRNRRRELTDTLQAETDQLEDEKSALQTEIANLLKEKEKLEFILAAHRPACKIPDDLGFPEEMSVASLDLTGGLPEVATPESEEAFTLPLLNDPEPKPSVEPVKSISSMELKTEPFDDFLFPASSRPSGSETARSVPDMDLSGSFYAADWEPLHSGSLGMGPMATELEPLCTPVVTCTPSCTAYTSSFVFTYPEADSFPSCAAAHRKGSSSNEPSSDSLSSPTLLAL',
                                                 'variant': 'A9T', 'pred_class': 'no effect',
                                                 'pred_score': 0.6070586442947388, 'error_msg': '', 'state': 'success'},
                                             {
                                                 'affected_protein': 'MEMQDLTSPHSRLSGSSESPSGPKLDSSHINSTSMTPNGTEVKTEPMSSSEIASTAADGSLDSFSGSALGSSSFSPRPAHPFSPPQIYPSKSYPHILPTPSSQTMAAYGQTQFTTGMQQATAYATYPQPGQPYGISSYGALWAGIKTESGLSQSQSPGQTGFLSYGTSFGTPQPGQAPYSYQMQGSSFTTSSGLYSGNNSLTNSSGFNSSQQDYPSYPGFGQGQYAQYYNSSPYPAHYMTSSNTSPTTPSTNATYQLQEPPSGVTSQAVTDPTAEYSTIHSPSTPIKETDSERLRRGSDGKSRGRGRRNNNPSPPPDSDLERVFIWDLDETIIVFHSLLTGSYANRYGRDPPTSVSLGLRMEEMIFNLADTHLFFNDLEECDQVHIDDVSSDDNGQDLSTYNFGTDGFPAAATSANLCLATGVRGGVDWMRKLAFRYRRVKEIYNTYKNNVGGLLGPAKREAWLQLRAEIEALTDSWLTLALKALSLIHSRTNCVNILVTTTQLIPALAKVLLYGLGIVFPIENIYSATKIGKESCFERIIQRFGRKVVYVVIGDGVEEEQGAKKHAMPFWRVSSHSDLMALHHALELEYL',
                                                 'partner_protein': 'MSMLPTFGFTQEQVACVCEVLQQGGNIERLGRFLWSLPACEHLHKNESVLKAKAVVAFHRGNFRELYKILESHQFSPHNHAKLQQLWLKAHYIEAEKLRGRPLGAVGKYRVRRKFPLPRSIWDGEETSYCFKEKSRSVLREWYAHNPYPSPREKRELAEATGLTTTQVSNWFKNRRQRDRAAEAKERENSENSNSSSHNPLASSLNGSGKSVLGSSEDEKTPSGTPDHSSSSPALLLSPPPPPGLPSLHSLGHPPGPSAVPVPVPGGGGADPLQHHHSLQDSILNPMSANLVDLGS',
                                                 'variant': 'S486P', 'pred_class': 'decreasing',
                                                 'pred_score': 0.40119510889053345, 'error_msg': '',
                                                 'state': 'success'},
                                             {'affected_protein': 'P97767', 'partner_protein': 'Q62232',
                                              'variant': 'S486P', 'pred_class': 'decreasing',
                                              'pred_score': 0.40119510889053345, 'error_msg': '', 'state': 'success'},
                                             {'affected_protein': 'Q9UIA0',
                                              'partner_protein': 'MMFSGFNADYEASSSRCSSASPAGDSLSYYHSPADSFSSMGSPVNAQDFCTDLAVSSANFIPTVTAISTSPDLQWLVQPALVSSVAPSQTRAPHPFGVPAPSAGAYSRAGVVKTMTGGRAQSIGRRGKVEQLSPEEEEKRRIRRERNKMAAAKCRNRRRELTDTLQAETDQLEDEKSALQTEIANLLKEKEKLEFILAAHRPACKIPDDLGFPEEMSVASLDLTGGLPEVATPESEEAFTLPLLNDPEPKPSVEPVKSISSMELKTEPFDDFLFPASSRPSGSETARSVPDMDLSGSFYAADWEPLHSGSLGMGPMATELEPLCTPVVTCTPSCTAYTSSFVFTYPEADSFPSCAAAHRKGSSSNEPSSDSLSSPTLLAL',
                                              'variant': 'A9T', 'pred_class': 'no effect',
                                              'pred_score': 0.6070586442947388, 'error_msg': '', 'state': 'success'}, {
                                                 'affected_protein': 'MEKSIAKGLSDKLYEKRKAAALELEKLVKQCVLEGDYDRIDKIIDELCRDYAYALHQPMARNAGLMGLAATAIALGINDVGRYLRNILPPVLACFGDQNDQVRFYACESLYNIAKIAKGEILVYFNEIFDVLCKISADTENSVRGAAELLDRLIKDIVAERASNYISIVNNGSHGLLPAIKTDPISGDVYQEEYEQDNQLAFSLPKFIPLLTERIYAINPDTRVFLVDWLKVLLNTPGLELISYLPSFLGGLFTFLGDSHKDVRTVTHTLMDSLLHEVDRISKLQTEIKMKRLERLKMLEDKYNNSSTPTKKADGALIAEKKKTLMTALGGLSKPLSMETDDTKLSNTNETDDERHLTSQEQLLDSEATSQEPLRDGEEYIPGQDINLNFPEVITVLVNNLASSEAEIQLIALHWIQVILSISPNVFIPFLSKILSVLLKLLSDSDPHITEIAQLVNGQLLSLCSSYVGKETDGKIAYGPIVNSLTLQFFDSRIDAKIACLDWLILIYHKAPNQILKHNDSMFLTLLKSLSNRDSVLIEKALSLLQSLCSDSNDNYLRQFLQDLLTLFKRDTKLVKTRANFIMRQISSRLSPERVYKVISSILDNYNDTTFVKMMIQILSTNLITSPEMSSLRNKLRTCEDGMFFNSLFKSWCPNPVSVISLCFVAENYELAYTVLQTYANYELKLNDLVQLDILIQLFESPVFTRMRLQLLEQQKHPFLHKCLFGILMIIPQSKAFETLNRRLNSLNIWTSQSYVMNNYIRQRENSNFCDSNSDISQRSVSQSKLHFQELINHFKAVSEEDEYSSDMIRLDHGANNKSLLLGSFLDGIDEDKQEIVTPISPMNEAINEEMESPNDNSSVILKDSGSLPFNRNVSDKLKK',
                                                 'partner_protein': 'P53950', 'variant': 'L329T',
                                                 'pred_class': 'disrupting', 'pred_score': 0.3783116340637207,
                                                 'error_msg': '', 'state': 'success'}]}
    dbc = DBConnection()
    dbc.col.insert_one(test_data)
    for item in dbc.col.find({"job_id": '60653d24-6289-4aff-8881-40a74669f0e8'}):
        print(item)
    # print(os.path.abspath(__file__).rsplit('/', 2)[0])


if __name__ == '__main__':
    # dbc = DBConnection()
    test()
